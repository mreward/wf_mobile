
require:
   .util ->
      ID, tuck
      longest-run
   kaiser

provide:
   clobber
   array-clobber-helper
   object-clobber-helper



object-clobber-helper{obj, new-obj, items, owns} =
   operations = {}
   items{obj} each
      {k, v} when not owns{new-obj, k} ->
         operations.push with #delete{k}
   items{new-obj} each {k, match v} ->
      do: v0 = obj[k]
      === v0 or when v0 and v0[ID] and v and v[ID] == v0[ID] ->
         pass
      else ->
         operations.push with #put{k, v}
   operations


array-clobber-helper{arr, new-arr, duplicate = true} =

   ;; 1. For each element of the new array, find the index of the
   ;; corresponding element in the old array.

   ;; 2. Find the longest filtering of the array of indices such
   ;; that the indices are in order.

   ;; 3. Splice the data around these fixed points, which should
   ;; amount to the minimal splicing that transforms the array

   idpos = {=}
   enumerate{arr} each {i, match x} ->
      {^ID => Number? id} -> idpos[id] = {i, x}
      else -> continue

   indices = enumerate{new-arr} each {i, match x} ->
      {^ID => Number? id} when idpos[id] -> {i, idpos[id][0]}
      else -> continue

   run = longest-run{indices, cmp, {-1, -1}} where
      cmp{{_, p1}, {_, p2}} = p1 < p2

   newids = {=}
   new-arr each x and {^ID => Number? id} when true ->
      newids[id] = true
   disposable = {=}
   arr each x and {^ID => Number? id} when not newids[id] ->
      disposable[id] = true

   if duplicate:
      run each {new-i, old-i} ->
         ;; These will be automatically preserved
         if arr[old-i] and arr[old-i][ID]:
            delete idpos[arr[old-i][ID]]

   run.push with {new-arr.length, arr.length}

   var old-current = 0
   var new-current = 0

   operations = {}
   run each {new-i, old-i} ->
      var n = old-i - old-current
      fresh = new-arr.slice{new-current, new-i}

      ;; Clobber what we can, shifting the splice
      while n > 0 and old-current < old-i and fresh.length > 0:
         match arr[old-current]:
            null? or undefined? or String? or Number? or Boolean? or Function? ->
               operations.push with #clobber{new-current, fresh.shift{}}
               old-current += 1
               new-current += 1
               n -= 1
            {^ID => Number? id} when disposable[id] ->
               operations.push with #clobber{new-current, fresh.shift{}}
               old-current += 1
               new-current += 1
               n -= 1
            else ->
               break

      ;; But now we have to replace a slice
      inserts = fresh each
         entry and {_, orig} is idpos[entry[ID] or -1] when entry and duplicate ->
            ;; We can recover this entry; however dir.duplicate prevents
            ;; us from having the same reference more than once in the
            ;; tree, so we remove it from idpos so we can't reuse it.
            delete idpos[entry[ID]]
            #keep{orig}
         entry ->
            #acquire{entry}

      operations.push with
         #splice{new-current, n, inserts}
      old-current = old-i + 1
      new-current = new-i + 1

   operations


clobber{old-value, new-value, dir} =
   match old-value:
      null? or undefined? or String? or Number? or Boolean? or Symbol? ->
         return new-value
      else -> pass

   h1 = kaiser.get-handler{old-value}
   h2 = kaiser.get-handler{new-value}
   if h1 !== h2:
      return dir.replace{old-value, new-value, false}

   dir.unlist{old-value}

   o1 = h1.serialize{old-value}
   o2 = h2.serialize{new-value}

   match o1:
      Array? ->
         exits = new Set{}
         keeps = new Set{}

         array-clobber-helper{o1, o2, dir.duplicate} each
            #clobber{i, value} ->
               o1[i] = dir.clobber{o1[i], value}
            #splice{var start, var n, inserts} ->
               start..[start + n] each i ->
                  exits.add{o1[i]}
               o1.splice{start, n, *acquired} where
                  acquired = inserts each
                     #keep{x} ->
                        keeps.add{x}
                        x
                     #acquire{x} -> dir.acquire{x}

         exits each x when not keeps.has{x} ->
            dir.exit{x}

      else ->
         object-clobber-helper{
            o1, o2, items
            {a, b} -> Object.has-own-property.call{a, b}
         } each
            #delete{k} ->
               dir.exit{o1[k]}
               delete o1[k]
            #put{k, v} ->
               o1[k] = dir.clobber{o1[k], v}

   h1.fill{old-value, o1}

   tuck{old-value, ID, new-value[ID]}
   dir.list{old-value}
   old-value

