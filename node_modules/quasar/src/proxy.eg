
require:
   .util ->
      tuck, identify, next-id
      ID, FORKID, PROTOID
      VERSION, DIRECTORY
      symbols
   "./tracks" ->
      Tracks, Patch, ObjectTrack, ArrayTrack
   kaiser ->
      get-handler
      extend-handler

provide:
   proxy, deprox, reprox
   object-proxy, array-proxy
   read-proxy, write-proxy
   setup-proxy



proxy{value and get-handler! match h, tracks, patch} =
   {proxy => fn} ->
      fn{value, tracks, patch}
   else ->
      throw E.quasar.proxy{'Cannot proxy {value}'}

deprox{x} =
   if x and x[symbols.source]:
      x[symbols.source]
   else:
      x

reprox{match value, tracks, patch} =
   null? or undefined? or Number? or String? or Symbol? or Boolean? ->
      value
   {^symbols.source => true? obj} ->
      proxy{obj, tracks or value[symbols.tracks], patch or value[symbols.patch]}
   else ->
      proxy{value, tracks, patch}


read-proxy{value, tracks} =
   proxy{value, tracks, null}

write-proxy{value, patch} =
   proxy{value, null, patch}


setup-proxy{self, obj, tracks, patch, var track-initializer} =

   track-initializer or= ObjectTrack

   identify{obj}

   self[symbols.obj] = obj
   self[symbols.tracks] = tracks
   self[symbols.patch] = patch

   id = obj[ID]

   self[symbols.register-tracks]{key} =
      let tracks = self[symbols.tracks]
      if tracks:
         tracks.mark{self, key, track-initializer}

   self[symbols.register-patch]{key, val} =
      let patch = self[symbols.patch]
      if patch:
         patch.register{self, key, val, -> {=}}

   self[symbols.register-patch-function]{key, fn} =
      let patch = self[symbols.patch]
      if patch:
         let d = patch.get-for{obj}??[key]
         patch.register{self, key, fn{d}, -> {=}}

   tuck{self, ID, obj[ID]}
   tuck{self, symbols.source, obj}
   tuck{self, VERSION, obj[VERSION]}


basic-object-proxy{obj, tracks, patch} =
   self = this
   setup-proxy{self, obj, tracks, patch, ObjectTrack}
   Object.prevent-extensions{self}

basic-get{name} =
   self = this
   self[symbols.register-tracks]{name}
   proxy{self[symbols.obj][name]
         self[symbols.tracks]
         self[symbols.patch]}

basic-set{name, new-value} =
   self = this
   self[symbols.register-patch]{name, #update{deprox{new-value}}}


proxy-proto-cache = {=}

proxy-proto-for{obj} =
   orig-proto = Object.get-prototype-of{obj}
   pid = match orig-proto:
      null? or undefined? -> null
      when Object.has-own-property.call{orig-proto, PROTOID} ->
         orig-proto[PROTOID]
      else ->
         let pid = next-id{}
         tuck{orig-proto, PROTOID, pid}
         pid

   the-keys = keys{obj}.sort{}
   key = '{pid}\x01{the-keys.join{"\x00"}}'
   match proxy-proto-cache[key]:
      undefined? ->
         proto = Object.create{orig-proto}
         the-keys each match name ->
            R"^__"? ->
               Object.define-property{proto, name} with {
                  get{} = this[symbols.obj][name]
                  enumerable = true
               }
            else ->
               Object.define-property{proto, name} with {
                  get{} = this._get{name}
                  set{value} = this._set{name, value}
                  enumerable = true
               }
         proto._get = basic-get
         proto._set = basic-set
         proxy-proto-cache[key] = proto
         proto
      proto ->
         proto

object-proxy{obj, tracks, patch} =
   p = proxy-proto-for{obj}
   basic-object-proxy.call{Object.create{p}, obj, tracks, patch}



class array-proxy:

   constructor{obj, tracks, patch} =
      setup-proxy{@, obj, tracks, patch, ArrayTrack}

   _update-iter{match, i, j, stick-to-end = false} =
      undefined? ->
         {i, j, stick-to-end}
      {i2, j2} ->
         {Math.min{i, i2}, Math.max{j, j2}, stick-to-end}
      else ->
         {i, j, stick-to-end}

   ;; GETTERS

   get{i} =
      self[symbols.register-tracks]{i}
      proxy{self[symbols.obj][i]
            self[symbols.tracks]
            self[symbols.patch]}

   slice{i = 0, var j = null} =
      stick = if{j === null, [j = self[symbols.obj].length; true], false}
      self[symbols.register-tracks]{"@iter"}

      self[symbols.obj].slice{i, j} each* x ->
         proxy{x
               self[symbols.tracks]
               self[symbols.patch]}

   [^Symbol.iterator]{} =
      proxies = self[symbols.obj] each x ->
         proxy{x
               self[symbols.tracks]
               self[symbols.patch]}

      self[symbols.register-tracks]{"@iter"}

      proxies[Symbol.iterator]{}

   for-each{fn} =
      [@] each x -> fn{x}
      undefined

   index-of{deprox! elem} =
      self[symbols.register-tracks]{"@iter"}
      self[symbols.obj].index-of{elem}

   map{fn} =
      [@] each x -> fn{x}

   join{sep} =
      [[@] each x -> x].join{sep}

   to-string{} =
      '\{{@join{", "}}\}'

   ;; SETTERS

   set{i, new-value} =
      @_splice{i, 1, {new-value}, false}

   ;; [^symbols.set]{i, new-value} =
   ;;    @_splice{i, 1, {new-value}, false}

   remove{deprox! elem} =
      idx = self[symbols.obj].index-of{elem}
      if idx !== -1:
         @splice{idx, 1}

   pop{n = 1} =
      @_splice{self[symbols.obj].length - n, n, {}, false}
   push{*values} =
      @_splice{self[symbols.obj].length, 0, values, .append}

   shift{n = 1} =
      @_splice{0, n, {}, false}
   unshift{*values} =
      @_splice{0, 0, values, .prepend}

   .splice{i, n, *values} =
      @_splice{i, n, values, false}

   replace{new-array} =
      @_splice{0, self[symbols.obj].length, new-array, false}

   ._splice{i, n, values, pos = false} =
      emsg = 'Inconsistent splicing (this may happen if you modify'
         \ + ' the array more than once at the same place)'

      self[symbols.register-patch-function]{"@splice"} with var d ->
         d or= Array{self[symbols.obj].length + 1}
         match d[i]:
            === true ->
               throw E.splice{emsg}
            undefined? ->
               d[i] = {n, values}
            {n2, previous-values} when n == 0 or n2 == 0 ->
               d[i] = {Math.max{n, n2}, new-values} where new-values =
                  match pos:
                     .prepend -> values ++ previous-values
                     .append -> previous-values ++ values
                     else -> throw E.splice{emsg}
            else ->
               throw E.splice{emsg}
         1..[n - 1] each j ->
            match d[i + j]:
               undefined? ->
                  d[i + j] = true
               else ->
                  throw E.splice{emsg}
         d

Object.define-property{array-proxy.prototype, .length} with {
   .get{} =
      this[symbols.register-tracks]{"length"}
      proxy{this[symbols.obj].length
            this[symbols.tracks]
            this[symbols.patch]}
}


