
require:
   "./proxy" ->
      proxy
   .directory ->
      Directory
   .tracks ->
      Tracks, Patch
   .util ->
      symbols
   .cache ->
      Frame, with-frame
   events ->
      EventEmitter

provide:
   State
   Function



class EE < EventEmitter:
   constructor{@_self = null} =
      EventEmitter.constructor.call{@}
   eager-async emit{event, *args} =
      @listeners{event} each listener ->
         await listener.apply{@_self, args}



;;;;;;;;;;;
;; State ;;
;;;;;;;;;;;

class State:

   constructor{@origin, @options = {=}} =
      @options as {
         clobber-patch => @clobber-patch = false
         input-self => @input-self = false
         commit-policy => @commit-policy = .transact
      }
      @emitter = new EE{}
      items{@options.listeners or {=}} each {ename, fn} ->
         @emitter.on{ename, fn}

      @emitter.on{.new-listener} with {match event, listener} ->
         .state -> listener{@model{}}
         else -> pass

      @ntrans = 0
      @patch = Patch{}

      @dir = Directory{clobber-patch = @clobber-patch}
      @dir[symbols.associated-state] = [@]
      @basis = @dir.acquire{@origin}
      @basis-proxy = proxy{@basis, null, @patch}
      @patch.shift{}

      @outstanding-commit = false

   on{event, listener} =
      @emitter.on{event, listener}

   sync{listener} =
      @on{.state, listener}

   get{} =
      @basis

   self{} =
      if @input-self:
         @
      else:
         @basis

   model{v = null} =
      if v === null:
         @basis-proxy
      else:
         proxy{v, null, @patch}

   eager-async commit{} =
      if @ntrans > 0 or @committing:
         @outstanding-commit = true
         false
      else:
         @committing = true
         patch = Patch{@patch.shift{}}
         @dir.patch{patch}
         @outstanding-commit and @committing = false
         await @emitter.emit{.commit, @model{}, patch}
         await @emitter.emit{.state, @model{}, patch}
         true

   eager-async transact{fn} =
      @ntrans += 1
      await fn{@model{}}
      @ntrans -= 1
      if @ntrans === 0 and [@commit-policy === .transact or @outstanding-commit]:
         @commit{}
      else:
         @emitter.emit{.transact, @}


;;;;;;;;;;;;;;
;; Function ;;
;;;;;;;;;;;;;;

UNCOMPUTED = Symbol{.UNCOMPUTED}

class Function:

   constructor{@input, @render, @options = {=}} =
      @emitter = EE{}
      items{@options.listeners or {=}} each {ename, fn} ->
         @emitter.on{ename, fn}

      @emitter.on{.new-listener} with {match event, listener} ->
         .value ->
            eager-async:
               if @value !== UNCOMPUTED:
                  listener{await @value}
         .effects ->
            eager-async:
               if @value !== UNCOMPUTED:
                  await @value
                  listener{@basis.effects}
         .error ->
            if @error: listener{@error}
         else -> pass
      @options as {
         clobber-patch => @clobber-patch = true
         side-effects => @side-effects = false
      }
      ;; @dir = Directory{clobber-patch = @clobber-patch}
      ;; @dir[symbols.associated-state] = [@]
      @value = UNCOMPUTED
      @redo = true
      @input.sync{@recompute.bind{@}}

   eager-async compute{patch = null} =
      if @side-effects or not @redo and @_previous-input !== @input.get{}:
         @redo = true
      @_previous-input = @input.get{}
      ;; await with-frame{Frame{Tracks{}, new Set{}, context}, fn} where
      @basis =
         await with-frame{Frame{Tracks{}, {}, context}, fn} where
            context = {
               events = @emitter
               state = @input
               patch = patch
               dir = @input.dir
               out-patch = @patch
               ;; out-dir = @dir
               root = true
            }
            eager-async fn{} =
               if @redo:
                  @redo = false
                  await @render.rend.call{null, @input.model{}}
               else:
                  @basis = await @basis.update{}
                  @basis
      ;; @dir.acquire{@basis.value}
      @basis.value

   eager-async recompute{model, patch} =
      try:
         @error = null
         @value = @compute{patch}
         await @emitter.emit{.value, await @value}
         @emitter.emit{.effects, @basis.effects}
      catch e:
         @error = e
         @redo = true
         await @emitter.emit{.error, e}

   get{} =
      if @error:
         throw @error
      @value

   sync{fn} =
      @emitter.on{.value, fn}

   sync-effects{fn} =
      @emitter.on{.effects, fn}

   on{event, fn} =
      @emitter.on{event, fn}
