
require:
   .util ->
      ID, symbols

provide:
   ObjectTrack, ArrayTrack
   Counter, Chirurgies, Tracks
   Patch




;;;;;;;;;;;;;;;;;
;; ObjectTrack ;;
;;;;;;;;;;;;;;;;;

class ObjectTrack:
   constructor{init} =
      init and [[@] &: init]
   gen [^symbols.relevant-changes]{writes} =
      items{writes or {=}} each
         {name, _} and r is @[name] when r??.not-empty{} ->
            yield r

class ArrayTrack:
   constructor{init} =
      init and [[@] &: init]
   gen [^symbols.relevant-changes]{writes} =
      match writes["@splice"]:
         undefined? ->
            pass
         splices ->
            var mask = 3
            taints = splices each
               undefined? -> 3 &+ mask
               {1, {_}} -> 1 &+ mask
               else -> [mask = 0; 0]
            items{@} each
               {"@iter", v} ->
                  yield v
               {n, v} when v??.not-empty{} ->
                  if taints[n] != 3:
                     yield v



;;;;;;;;;;;;
;; Tracks ;;
;;;;;;;;;;;;


class Counter:
   constructor{} =
      @n-tracks = 0
   mark{} =
      @n-tracks += 1
   unmark{} =
      @n-tracks -= 1
   merge{other} =
      @n-tracks += other.n-tracks
   empty{} =
      @n-tracks <= 0
   not-empty{} =
      @n-tracks > 0
   size{} =
      1


class Chirurgies:
   constructor{} =
      @refs = new Map{}
   mark{{g, c}} =
      @refs.set{g, c}
   merge-one{counts, {g, c}} =
      if counts.n-tracks > 0:
         @refs.set{g, c}
   merge{other} =
      other.refs.entries{} each {g, c} -> @refs.set{g, c}
   unmerge-one{counts, {g, _}} =
      @refs.delete{g}
   unmerge{other} =
      other.refs.entries{} each {g, _} -> @refs.delete{g}
   unmerge-counts{other} =
      if other.n-tracks > 0:
         @refs = new Map{}
   empty{} =
      @refs.size === 0
   not-empty{} =
      @refs.size > 0
   size{} =
      @refs.size


class Tracks:

   constructor{@factory = Counter} =
      @data = {=}

   _data{} =
      object with items{@data} each {id, tr} ->
         {id} with
            object with items{tr} each {k, v} ->
               {k, v.not-empty{}}

   get{id} =
      id and @data[id]
   get-for{obj} =
      if not obj: return null
      id = obj[ID]
      id and @data[id]

   get-for-init{obj, initializer} =
      if not obj: return null
      id = obj[ID]
      id and [@data[id] or= initializer{}]

   list{} =
      items{@data}
   empty{} =
      return keys{@data}.length === 0

   mark{obj, key, initializer} =
      if not obj:
         return
      tracks = @get-for-init{obj, initializer}
      t = [tracks[key] or= @factory{}]
      t.mark{}

   unmark{obj, key} =
      tracks = @get-for{obj}
      if not tracks:
         return
      t = tracks[key]
      t.unmark{}
      if t.empty{}:
         delete tracks[key]

   merge{tracks, merger = .merge, arg = null} =
      items{tracks.data} each {id, v} ->
         v0 = [@data[id] or= Object.create{Object.get-prototype-of{v}}]
         items{v} each {key, obj} ->
            obj0 = [v0[key] or= @factory{}]
            obj0[merger]{obj, arg}
            if obj0.empty{}:
               delete v0[key]
         if keys{v0}.length === 0:
            delete @data[id]

   size{} =
      var sz = 0
      items{@data} each {id, ob} ->
         items{ob} each {k, v} ->
            sz += v.size{}
      sz



;;;;;;;;;;;
;; Patch ;;
;;;;;;;;;;;

class Patch:
   constructor{@data = {=}} =
      pass
   _data{} = @data
   get{id} =
      @data[id] or= {=}
   get-for{obj} =
      if not obj: return null
      id = obj[ID]
      id and @data[id]
   get-for-init{obj, initializer} =
      if not obj: return null
      id = obj[ID]
      id and [@data[id] or= initializer{}]
   register{obj, key, val, initializer} =
      patch = @get-for-init{obj, initializer}
      if patch:
         patch[key] = val
   shift{new-data = {=}} =
      {expr-value, @data} = {@data, new-data}
   list{} =
      items{@data}
   empty{} =
      return keys{@data}.length === 0


