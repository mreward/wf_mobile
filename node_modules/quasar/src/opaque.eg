
;; Work in progress

require:
   .cache ->
      cached-function
   .util ->
      symbols

provide:
   Opaque
   opaque-cached-function


;;;;;;;;;;;;
;; Opaque ;;
;;;;;;;;;;;;

opaque-wrapper = Symbol{"opaque-wrapper"}
contents = Symbol{"contents"}

extract-opaque{match x} =
   Opaque? -> x[contents]
   else -> x

class Opaque:
   constructor{match value} =
      String? or Number? or Boolean? or Symbol? or null? or undefined? ->
         throw E.opaque{'Opaque function cannot return a primitive value like \'{value}\''}
      {^opaque-wrapper => true?} ->
         throw E.opaque{'Opaque function must own the values it returns. You cannot return the result of another opaque call.'}
      else ->
         value[opaque-wrapper] = [@]
         @[contents] = value
   [^symbols.iterate-properties]{} =
      {{contents, @[contents], new-c -> @[contents] = new-c}}
   [^symbols.fork]{dir} =
      Opaque{@[contents]}

opaque-cached-function{render} =
   method render2{*args} =
      Opaque with render.apply{@, args}
   cached-function{render2}




;; walk{v} =
;;    iterate-properties{v} each
;;       {k, match obj, setter} ->
;;          match Opaque? opq ->
;;             do:
;;                gen-patch{@patch, extract-opaque{opq}}
;;             {^fields.cache => cache} when cache ->
;;                @direct-tracks.merge{cache.tracks, .merge-one} with
;;                   {'{v[ID]}\x00{k}', {v, k, gen-patch, cache}}
;;                @walk{obj}
;;             else ->
;;                @walk{obj}
;;          else ->
;;             @walk{obj}


