
require:
   kaiser
   .util ->
      identify
   "./proxy" ->
      deprox
      object-proxy, array-proxy

provide:
   register
   extend



extend{type, handler} =
   handler.proxy or= {value, tracks, patch} ->
      object-proxy{value, tracks, patch}
   kaiser.extend-handler{type, handler}

register{type, handler} =
   handler.proxy or= {value, tracks, patch} ->
      object-proxy{value, tracks, patch}
   kaiser.register{type, handler}


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Registering basic types ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;
;; Object ;;
;;;;;;;;;;;;

extend{{=}} with {
   proxy{value, tracks, patch} =
      object-proxy{deprox{value}, tracks, patch}
}


;;;;;;;;;;;
;; Array ;;
;;;;;;;;;;;

extend{{}} with {
   proxy{value, tracks, patch} =
      array-proxy{deprox{value}, tracks, patch}
}


;;;;;;;;;;;;;
;; Scalars ;;
;;;;;;;;;;;;;

{
   null, undefined, true, 0, "s"
} each x ->
   extend{x} with {

      proxy{value, tracks, patch} =
         value

   }
