
require-macros:
   earl-mocha ->
      describe, it, before, after, before-each, after-each
      xdescribe, xit
      assert, asserts
      expect-error

require:
   ..src ->
      identify, deprox
      read-proxy, write-proxy
      Directory
      intersect
      ID, FORKID
      Patch, Tracks
      Dict, State


describe "Dict":

   it "get":
      m = Dict{hello = 1, world = 2}
      assert m.get{.hello} == 1
      assert m.get{.world} == 2

   it "set":
      m = Dict{}
      m.set{.hello, 1}
      m.set{.world, 2}
      assert m.get{.hello} == 1
      assert m.get{.world} == 2

   it "items":
      m = Dict{hello = 1, world = 2}
      assert m.items{} == {{.hello, 1}, {.world, 2}}

   it "delete":
      m = Dict{hello = 1, world = 2}
      m.delete{.hello}
      assert m.items{} == {{.world, 2}}


describe "DictProxy":

   describe "read":

      before-each:
         @tracks = Tracks{}
         @m = Dict{a = 1, b = 2}
         @p = read-proxy{@m, @tracks}
         @id = @m[ID]

      it "get":
         assert @p.get{.a} === 1
         assert @p.get{.b} === 2
         assert @tracks._data{} == {
            @id => {a = true, b = true}
         }

      it "items":
         assert @p.items{} == {{.a, 1}, {.b, 2}}
         assert @tracks._data{} == {
            @id => {"@iter" => true}
         }

   describe "write":

      before-each:
         @patch = Patch{}
         @m = Dict{a = 1, b = 2}
         @p = write-proxy{@m, @patch}
         @id = @m[ID]

      it "set":
         @p.set{.a, 11}
         @p.set{.c, 33}
         assert @patch._data{} == {@id => {
            a = #update{11}
            c = #update{33}
         }}

      it "delete":
         @p.delete{.b}
         assert @patch._data{} == {@id => {
            b = #delete{}
         }}


describe "Dict and State":
   before-each:
      @d = Dict{a = 1, b = 2}
      @state = State{@d}

   it "works":
      assert @state.get{} == Dict{a = 1, b = 2}

   it "patchable":
      @state.transact with {d} ->
         d.set{.a, 11}
         d.set{.c, 33}
      assert @state.get{} == Dict{a = 11, b = 2, c = 33}

   it "patchable 2":
      @state.transact with {d} ->
         d.set{.a, 11}
         d.set{.c, 33}
         d.delete{.b}
      assert @state.get{} == Dict{a = 11, c = 33}



;; describe "reactive Dict":

;;    before-each:
;;       reactive @say-name{person} =
;;          {greeting = 'Hello, my name is {person.get{"name"}}!'}
;;       reactive @details{person} =
;;          person.items{} each {k, v} -> '{k} is {v}'
;;       @clara = Dict{name = "clara", age = 20}

;;    it "initial":
;;       sys = System{@clara, @say-name}
;;       assert sys.get{} == {greeting = 'Hello, my name is clara!'}

;;    it "set":
;;       sys = System{@clara, @say-name}
;;       sys.transact with {clara} ->
;;          clara.set{.name, .clairette}
;;       assert sys.get{} == {greeting = 'Hello, my name is clairette!'}

;;    it "items":
;;       sys = System{@clara, @details}
;;       assert sys.get{} == {'name is clara', 'age is 20'}

;;    it "items then set field":
;;       sys = System{@clara, @details}
;;       sys.transact with {clara} ->
;;          clara.set{.age, 30}
;;       assert sys.get{} == {'name is clara', 'age is 30'}

;;    it "items then add and delete field":
;;       sys = System{@clara, @details}
;;       sys.transact with {clara} ->
;;          clara.set{.nom, .clairette}
;;          clara.delete{.name}
;;          clara.delete{.age}
;;       assert sys.get{} == {'nom is clairette'}

