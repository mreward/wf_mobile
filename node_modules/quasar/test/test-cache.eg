
require-macros:
   earl-mocha ->
      describe, it, before, after, before-each, after-each
      xdescribe, xit
      assert, asserts
      expect-error
   ..src/util ->
      timeit

require:
   ..src ->
      deprox
      cached-function
      State, Function
   .people ->
      static-dir
      alice, bob, clara, donald, emily, francis, gerard, helen
      aid, bid, cid, did, eid, fid, gid, hid



count-calls{f} =
   rval{*args} =
      rval.count += 1
      f.apply{this, args}
   rval.count = 0
   rval

predicate! ArrayProx{p} =
   Array? deprox{p}


describe "cached":

   before-each:

      count-calls! cached-function! @say-name{person} =
         'Hello, my name is {person.name}!'

      count-calls! cached-function! @say-name-lisp{person} =
         @say-name{person}.replace{R.g"s", "th"}

      count-calls! cached-function! @say-names{people} =
         people each
            ArrayProx? subp -> @say-names{subp}
            person -> @say-name{person}

      count-calls! cached-function! @say-parent-names{person} =
         mother = @say-name{person.mother}
         father = @say-name{person.father}
         {= mother, = father}


      ;; count-calls! opaque-cached-function! @o-say-name{person} =
      ;;    ;; print 'o-say-name\{{person.name}\}'
      ;;    {'Hi, my name is {person.name}!'}

      ;; count-calls! opaque-cached-function! @o-say-names{people} =
      ;;    ;; print 'o-say-names\{...\}'
      ;;    people each
      ;;       ArrayProx? subp -> @o-say-names{subp}
      ;;       person -> @o-say-name{person}

      ;; count-calls! cached-function! @o-say-parent-names{person} =
      ;;    mother = @o-say-name{person.mother}
      ;;    father = @o-say-name{person.father}
      ;;    {= mother, = father}


   describe "State":
      it "initialize":
         s = State{clara}
         assert s.get{} == clara
      it "transact":
         s = State{clara}
         s.transact with {c} ->
            c.age = 100
         assert s.get{} != clara
         assert s.get{} == {
            name = .clara
            age = 100
            mother = alice
            father = bob
         }

   describe "Function":
      it "calls the function":
         s = State{clara}
         ds = Function{s, @say-name}
         assert ds.get{} == "Hello, my name is clara!"
         assert @say-name.orig.count === 1

      it "sub-tasks":
         s = State{clara}
         ds = Function{s, @say-parent-names}
         assert ds.get{} == {
            mother = "Hello, my name is alice!"
            father = "Hello, my name is bob!"
         }
         assert @say-name.orig.count === 2
         assert @say-parent-names.orig.count === 1

      it "compute with cached results":
         s = State{clara}
         ds = Function{s, @say-name-lisp}
         assert ds.get{} == "Hello, my name ith clara!"

   describe "transact":
      it "shallow":
         s = State{clara}
         ds = Function{s, @say-name}
         assert ds.get{} == "Hello, my name is clara!"
         s.transact with {clara} ->
            clara.name = "clarinette"
         assert ds.get{} == "Hello, my name is clarinette!"
         assert @say-name.orig.count === 2
         s.transact with {clara} ->
            clara.name = "samantha"
         assert ds.get{} == "Hello, my name is samantha!"
         assert @say-name.orig.count === 3

      it "deep":
         s = State{clara}
         ds = Function{s, @say-parent-names}
         assert ds.get{} == {
            mother = "Hello, my name is alice!"
            father = "Hello, my name is bob!"
         }
         s.transact with {clara} ->
            clara.mother.name = .brigitte
            clara.father.name = .claude
         assert ds.get{} == {
            mother = "Hello, my name is brigitte!"
            father = "Hello, my name is claude!"
         }
         assert @say-name.orig.count === 4
         assert @say-parent-names.orig.count === 2

      it "compute with cached results":
         s = State{clara}
         ds = Function{s, @say-name-lisp}
         assert ds.get{} == "Hello, my name ith clara!"
         s.transact with {clara} ->
            clara.name = "sarah"
         assert ds.get{} == "Hello, my name ith tharah!"

      it "lazy":
         s = State{clara}
         ds = Function{s, @say-parent-names}
         assert ds.get{} == {
            mother = "Hello, my name is alice!"
            father = "Hello, my name is bob!"
         }
         s.transact with {clara} ->
            clara.father.name = .claude
         assert ds.get{} == {
            mother = "Hello, my name is alice!"
            father = "Hello, my name is claude!"
         }
         assert @say-name.orig.count === 3
         assert @say-parent-names.orig.count === 2

         s.transact with {clara} ->
            clara.mother.name = .brigitte
         assert ds.get{} == {
            mother = "Hello, my name is brigitte!"
            father = "Hello, my name is claude!"
         }
         assert @say-name.orig.count === 4
         assert @say-parent-names.orig.count === 3


   describe "arrays":
      it "deep":
         s = State{{alice, bob, clara}}
         ds = Function{s, @say-names}
         assert ds.get{} == {
            "Hello, my name is alice!"
            "Hello, my name is bob!"
            "Hello, my name is clara!"
         }
         s.transact with {people} ->
            people.set{0, emily}
            people.get{1}.name = .balthazar
            people.push with static-dir.acquire{{donald, francis}}
         assert ds.get{} == {
            "Hello, my name is emily!"
            "Hello, my name is balthazar!"
            "Hello, my name is clara!"
            {"Hello, my name is donald!"
             "Hello, my name is francis!"}
         }
         assert @say-name.orig.count === 7
         assert @say-names.orig.count === 3



wait = promisify with {d, f} -> setTimeout.call{null, f, d}

describe "async cached":

   before-each:
      async count-calls! cached-function! @say-name{person} =
         await wait{10}
         'Hello, my name is {person.name}!'

   it "calls the function":
      s = State{clara}
      ds = Function{s, @say-name}
      assert [await ds.get{}] == "Hello, my name is clara!"
      assert @say-name.orig.count === 1

   it "transact":
      s = State{clara}
      ds = Function{s, @say-name}
      assert [await ds.get{}] == "Hello, my name is clara!"
      await s.transact with {clara} ->
         clara.name = .brigitte
      assert [await ds.get{}] == "Hello, my name is brigitte!"



