"use strict";

require("earlgrey-runtime/5");var t0$2 = undefined;var t0$8 = undefined;var tmp$0 = undefined;var $targ$2 = undefined;var deps$0 = undefined;var $targ$3 = undefined;var $targ$4 = undefined;var $targ$5 = undefined;var $targ$6 = undefined;var $targ$7 = undefined;var $targ$8 = undefined;var $targ$9 = undefined;var $targ$10 = undefined;var $targ$11 = undefined;var $targ$12 = undefined;var $targ$13 = undefined;var $targ$14 = undefined;var $targ$15 = undefined;var $targ$16 = undefined;var tuck$0 = undefined;var $targ$0 = undefined;var not__minus__inspectable$0 = undefined;var symbols$0 = undefined;var ID$0 = undefined;var FORKID$0 = undefined;var PROTOID$0 = undefined;var VERSION$0 = undefined;var DIRECTORY$0 = undefined;var _id$0 = undefined;var next__minus__id$0 = undefined;var identify$0 = undefined;var fork__minus__identify$0 = undefined;var longest__minus__run$0 = undefined;var timeit$0 = undefined;tuck$0 = function tuck() {
  var obj$0 = undefined;var name$0 = undefined;var value$0 = undefined;var writable$0 = undefined;var t0$0 = undefined;var m$0$0 = undefined;m$0$0 = arguments;t0$0 = m$0$0.length;if (t0$0 >= 3 && t0$0 <= 4) {
    obj$0 = m$0$0[0];name$0 = m$0$0[1];value$0 = m$0$0[2];if (3 >= t0$0) {
      writable$0 = true;
    } else {
      writable$0 = m$0$0[3];
    }if (obj$0 && getChecker(Object)(obj$0)) {
      return Object.defineProperty(obj$0, name$0, { value: value$0, enumerable: false, writable: writable$0, configurable: true });
    }
  } else {
    return ___match_error(m$0$0, "{obj, name, value, writable = true}");
  }
};$targ$0 = function (ph$0$0) {
  var bridge$$8181$0 = undefined;var t0$1 = undefined;var t1$0 = undefined;var bridge$$8180$0 = undefined;bridge$$8180$0 = ph$0$0;if ((bridge$$8181$0 = bridge$$8180$0, bridge$$8181$0 === null || bridge$$8181$0 === void 0) || ___hasprop(bridge$$8180$0, "symbols") && (t0$1 = bridge$$8180$0.symbols, t1$0 = "notInspectable", ___hasprop(t0$1, t1$0) && (send(t0$1, t1$0) ? true : false))) {
    return true;
  } else {
    return false;
  }
};t0$2 = getProjector(predicate)($targ$0);if (t0$2[0]) {
  not__minus__inspectable$0 = t0$2[1];
} else {
  ___match_error($targ$0, "predicate! not-inspectable{match}");
}symbols$0 = { id: Symbol("id"), forkid: Symbol("forkid"), protoid: Symbol("protoid"), version: Symbol("version"), source: Symbol("source"), directory: Symbol("directory"), obj: Symbol("obj"), tracks: Symbol("tracks"), patch: Symbol("patch"), notInspectable: Symbol("notInspectable"), key: Symbol("key"), cache: Symbol("cache"), associatedState: Symbol("associatedState"), relevantChanges: Symbol("relevantChanges"), registerTracks: Symbol("registerTracks"), registerPatch: Symbol("registerPatch"), registerPatchFunction: Symbol("registerPatchFunction") };ID$0 = symbols$0.id;FORKID$0 = symbols$0.forkid;PROTOID$0 = symbols$0.protoid;VERSION$0 = symbols$0.version;DIRECTORY$0 = symbols$0.directory;_id$0 = 0;next__minus__id$0 = function nextId() {
  _id$0 = _id$0 + 1;return _id$0;
};identify$0 = function identify(temp$0$0) {
  var t0$3 = undefined;var bridge$$8257$0 = undefined;var bridge$$8256$0 = undefined;var bridge$$8255$0 = undefined;var bridge$$8254$0 = undefined;var $$8260$0 = undefined;var bridge$$8253$0 = undefined;var x$0 = undefined;var ph$1$0 = undefined;t0$3 = temp$0$0;x$0 = t0$3;ph$1$0 = t0$3;bridge$$8253$0 = ph$1$0;if ((bridge$$8254$0 = bridge$$8253$0, (bridge$$8255$0 = bridge$$8254$0, (bridge$$8256$0 = bridge$$8255$0, (bridge$$8257$0 = bridge$$8256$0, bridge$$8257$0 === null || bridge$$8257$0 === void 0) || typeof bridge$$8256$0 === "number") || typeof bridge$$8255$0 === "string") || getChecker(Symbol)(bridge$$8254$0)) || typeof bridge$$8253$0 === "boolean") {
    return x$0;
  } else {
    if (send(x$0, ID$0)) {
      return x$0;
    } else {
      tuck$0(x$0, ID$0, next__minus__id$0());return x$0;
    }
  }
};fork__minus__identify$0 = function forkIdentify(temp$1$0) {
  var t0$4 = undefined;var bridge$$8318$0 = undefined;var bridge$$8317$0 = undefined;var bridge$$8316$0 = undefined;var bridge$$8315$0 = undefined;var $$8321$0 = undefined;var bridge$$8314$0 = undefined;var x$1 = undefined;var ph$2$0 = undefined;t0$4 = temp$1$0;x$1 = t0$4;ph$2$0 = t0$4;bridge$$8314$0 = ph$2$0;if ((bridge$$8315$0 = bridge$$8314$0, (bridge$$8316$0 = bridge$$8315$0, (bridge$$8317$0 = bridge$$8316$0, (bridge$$8318$0 = bridge$$8317$0, bridge$$8318$0 === null || bridge$$8318$0 === void 0) || typeof bridge$$8317$0 === "number") || typeof bridge$$8316$0 === "string") || getChecker(Symbol)(bridge$$8315$0)) || typeof bridge$$8314$0 === "boolean") {
    return x$1;
  } else {
    if (send(x$1, FORKID$0)) {
      return x$1;
    } else {
      tuck$0(x$1, FORKID$0, next__minus__id$0());return x$1;
    }
  }
};longest__minus__run$0 = function longestRun() {
  var cache$0 = undefined;var helper$0 = undefined;var indices$0 = undefined;var cmp$0 = undefined;var minimum$0 = undefined;var t0$5 = undefined;var m$1$0 = undefined;m$1$0 = arguments;t0$5 = m$1$0.length;if (t0$5 >= 1 && t0$5 <= 3) {
    indices$0 = m$1$0[0];if (1 >= t0$5) {
      cmp$0 = function (x$2, y$0) {
        return x$2 < y$0;
      };
    } else {
      cmp$0 = m$1$0[1];
    }if (2 >= t0$5) {
      minimum$0 = -1;
    } else {
      minimum$0 = m$1$0[2];
    }cache$0 = {};helper$0 = function helper(i$0, minimum$1) {
      var rval$0 = undefined;var x$3 = undefined;var baseline$0 = undefined;var key$0 = undefined;var r$0 = undefined;var $targ$1 = undefined;key$0 = "" + i$0 + "/" + minimum$1;if (send(cache$0, key$0)) {
        return send(cache$0, key$0);
      }if (equal(i$0, indices$0.length)) {
        r$0 = [];
      } else {
        x$3 = send(indices$0, i$0);baseline$0 = helper$0(i$0 + 1, minimum$1);if (x$3 === null || !cmp$0(minimum$1, x$3)) {
          r$0 = baseline$0;
        } else {
          if (baseline$0.length > 0 && cmp$0(x$3, baseline$0[0])) {
            r$0 = [x$3].concat(baseline$0);
          } else {
            rval$0 = helper$0(i$0 + 1, x$3);if (rval$0.length < baseline$0.length) {
              r$0 = baseline$0;
            } else {
              r$0 = [x$3].concat(rval$0);
            }
          }
        }
      }$targ$1 = r$0;cache$0[key$0] = $targ$1;return r$0;
    };return helper$0(0, minimum$0);
  } else {
    return ___match_error(m$1$0, "{indices, cmp = {x, y} -> x < y, minimum = -1}");
  }
};tmp$0 = function tmp(temp$2$0) {
  var t0$6 = undefined;var t0$7 = undefined;var bridge$$8449$0 = undefined;var iters$0 = undefined;var body$0 = undefined;var __at___$0 = undefined;__at___$0 = this;bridge$$8449$0 = temp$2$0;if (Array.isArray(bridge$$8449$0) && (t0$6 = bridge$$8449$0.length, t0$6 === 3 && (bridge$$8449$0[0] === "data" && (iters$0 = bridge$$8449$0[1], body$0 = bridge$$8449$0[2], true))) || Array.isArray(bridge$$8449$0) && (t0$7 = bridge$$8449$0.length, t0$7 === 2 && (bridge$$8449$0[0] === "data" && (body$0 = bridge$$8449$0[1], iters$0 = ["value", 1], true)))) {} else {
    ___match_error(temp$2$0);
  }return ["multi", ["send", ["symbol", "="], ["data", ["symbol", "iters"], iters$0]], ["send", ["symbol", "="], ["data", ["symbol", "start"], ["send", ["symbol", "+"], ["data", ["void"], ["send", ["symbol", "new"], ["send", ["symbol", "Date"], ["data"]]]]]]], ["send", ["symbol", "each"], ["data", ["send", ["symbol", ".."], ["data", ["value", 1], ["symbol", "iters"]]], ["send", ["symbol", "->"], ["data", ["symbol", "_"], body$0]]]], ["send", ["symbol", "="], ["data", ["symbol", "end"], ["send", ["symbol", "+"], ["data", ["void"], ["send", ["symbol", "new"], ["send", ["symbol", "Date"], ["data"]]]]]]], ["send", ["symbol", "/"], ["data", ["send", ["symbol", "-"], ["data", ["symbol", "end"], ["symbol", "start"]]], ["symbol", "iters"]]]];
};$targ$2 = {};t0$8 = $targ$2;tmp$0.__deps = t0$8;deps$0 = t0$8;$targ$3 = __filename;tmp$0.__path = $targ$3;timeit$0 = tmp$0;$targ$4 = tuck$0;exports.tuck = $targ$4;$targ$5 = not__minus__inspectable$0;exports.notInspectable = $targ$5;$targ$6 = ID$0;exports.ID = $targ$6;$targ$7 = FORKID$0;exports.FORKID = $targ$7;$targ$8 = PROTOID$0;exports.PROTOID = $targ$8;$targ$9 = VERSION$0;exports.VERSION = $targ$9;$targ$10 = DIRECTORY$0;exports.DIRECTORY = $targ$10;$targ$11 = symbols$0;exports.symbols = $targ$11;$targ$12 = next__minus__id$0;exports.nextId = $targ$12;$targ$13 = identify$0;exports.identify = $targ$13;$targ$14 = fork__minus__identify$0;exports.forkIdentify = $targ$14;$targ$15 = longest__minus__run$0;exports.longestRun = $targ$15;$targ$16 = timeit$0;exports.timeit = $targ$16;void 0;
//# sourceMappingURL=util.js.map

