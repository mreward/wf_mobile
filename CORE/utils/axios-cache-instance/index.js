/**
 * Preconfigured instance of axios with enabled caching with localforage
 * It is a fork of `axios-cache-adapter` library to fulfill mWallet project requirements.
 * Documentation that includes fork's updated API:
 *
 * https://github.com/acidbiscuit/axios-cache-adapter
 */

import localforage from 'localforage'
import memoryDriver from 'localforage-memoryStorageDriver'
import Axios from 'axios'
import { setupCache } from 'axios-cache-adapter'
import _isObject from 'lodash/isObject'

import { wallet } from '_PROJECT/wallets.config'

const defaultCacheMinutes = 30

/**
 * Generate unique cache key, depending on request type and data.
 * @param req - Axios request
 * @returns {string}
 */
function cacheKeyFromRequest(req) {
    const requestUrl = req.url
    try {
        let cmd, lang, json
        if (_isObject(req.data)) {
            ({ cmd, lang, json } = JSON.parse(req.data))
        } else {
            json = req.data
        }

        // Simplified version for request to third-party APIs (e.g. MobiGift)
        if (!cmd && !lang) {
            const lang = req.headers['Accept-Language'] || 'any'
            return `${requestUrl}?lang=${lang}&payload=${req.data}`
        }

        const requestKey = `?cmd=${cmd}&lang=${lang}`

        if (_isObject(json)) {
            // "session" is excluded, as is unique per user login session
            const { ...payload } = json

            return `${requestUrl}${requestKey}&payload=${JSON.stringify(payload)}`
        }

        return `${requestUrl}${requestKey}`
    } catch (error) {
        console.warn('AxiosCacheAdapter::: failed to create unique cache key', error)
        return `${requestUrl}?payload=${req.data}`
    }
}

/**
 * Generate unique cache key, depending on lang (for GET requests).
 * @param req - Axios request
 * @returns {string}
 */
function cacheKeyFromGETRequest(req) {
    const requestUrl = req.url
    try {
        const lang = req.headers['Accept-Language'] || 'any'

        return `${requestUrl}?lang=${lang}`
    } catch (error) {
        console.warn('AxiosCacheAdapter::: failed to create unique cache key', error)
        return `${requestUrl}`
    }
}

const store = localforage.createInstance({
    // List of drivers used
    driver: [
        localforage.WEBSQL,
        localforage.LOCALSTORAGE,
        memoryDriver
    ],
    // Database name for cache storage
    name: `cache-${wallet.name}`
})

const cache = setupCache({
    maxAge: defaultCacheMinutes * 60 * 1000, // Default cache expiration
    store,
    /**
     * Cache key is generated by request data for POST requests or request url for GET requests
     * @param req - Axios request object
     * @returns {String}
     */
    key: (req) => {
        if (req.method.toLowerCase() !== 'get') {
            return cacheKeyFromRequest(req)
        }
        return cacheKeyFromGETRequest(req)
    }
})

const axios = Axios.create({
    adapter: cache.adapter
})

export default axios

export async function clearCache() {
    return store.clear()
}
